  input KeyValueObject{
    key   : String!
    value : FormValue!
  }


  type FieldKeyValuePair{
    key   : String!
    value : FormValue!
  }

  type Submitter{
    """
      
    """
    uuid                               : String!
    form                               : String!
    formPrimaryIdentifierKeys          : Parser
    fields                             : [FieldKeyValuePair!]! @relationship(type : "HAS_FIELD_VALUE", direction : OUT)
    formReferenceKeys                  : [Submitter!]! @relationship(type : "REFERENCE_PRIMARY_KEY", direction : OUT)
    connectedFormsReferencingSubmitter : [Submitter!]! @relationship(type : "REFERENCE_PRIMARY_KEY", direction : IN)
     
  }

  type Form {
    form_id                 : String
    form_name               : String
    form_creation_reference : String
    has_next_question       : Field @relationship(type : "HAS_NEXT_QUESTION", direction : OUT)
    next_form               : [Form!]!  @relationship(type : "NEXT_FORM", direction : OUT)
    primary_key             : [Field!]! @relationship(type : "HAS_PRIMARY_KEY", direction : OUT)
    foreign_key             : [Field!]! @relationship(type : "HAS_FOREIGN_KEY", properties : "reference", direction : OUT)
    identifier              : [Field!]! @cypher(statement: """ MATCH (f:Form)-[:HAS_PRIMARY_KEY]->(pk)
                                                         WHERE NOT ()-[:NEXT_FORM]->(f)
                                                         RETURN pk 
                                                     """ )
  }

  type Field {
    label             : String
    description       : String
    name              : String
    type              : String
    regex             : String
    value             : FormValue
    set               : SampleSet
    required          : Boolean
    component         : String
    conditionals      : Parser
    placeholder       : String
    filter            : Parser
    has_next_question : Field @relationship(type : "HAS_NEXT_QUESTION", direction : OUT)
    foreign_key_to    : [Form!]! @relationship(type : "HAS_FOREIGN_KEY",  direction : IN)
    primary_key_to    : Form @relationship(type : "HAS_PRIMARY_KEY", direction : IN)
  }

  interface reference @relationshipProperties {
    canReference : FormValue
    override     : Parser
  }


  type Query {

    PopulateForm(id : String!) : [Field]
    @cypher( statement: """ 
    MATCH (:Form {form_id : $id})-[:HAS_NEXT_QUESTION*]->(f:Field) RETURN f
    """)

  #   FormFeilds(form_id : String!, depth : Int!) : [Field]
  #   @cypher( statement: """ 
  #   MATCH (f:Form {form_id: $form_id})
  #   CALL apoc.path.expandConfig(f, {
  #     relationshipFilter: 'HAS_NEXT_QUESTION',
  #     minLevel: 1,
  #     maxLevel: $depth
  #     })
  #     YIELD path
  #     RETURN nodes(path)[-1]""")

  }


  type Mutation {

     Create_Form_Copy(uuid          : String!
                      form          : String!,
                      formPrimaryIdentifierKeys  : Parser!,
                      key_value_pair: [KeyValueObject!]!): Submitter @cypher( statement: """ 
          MERGE (s:Submitter {uuid : $uuid, form : $form, formPrimaryIdentifierKeys : $formPrimaryIdentifierKeys})
          WITH s
              UNWIND $key_value_pair as object
                 CREATE (s)-[:HAS_FIELD_VALUE]->(v:FieldKeyValuePair {key : object.key, value : object.value})
          WITH s
          RETURN s""")

  }

  #   UpdateFormCopy( form_id                   : String!,
  #                   uuid                      : String!
  #                   program_id                : String!, 
  #                   submitter_donor_id        : String!
  #                   info                      : [JSON]): [] @cypher( statement: """ 
  #     MATCH  (d:Struct { form_id : $form_id, uuid: $uuid } )
  #     WITH d
  #     UNWIND $info as object
  #       MATCH (d)-[:HAS_VALUE]->(v:Value {key : object.key})
  #       SET v.value = object.value
  #     WITH v
  #     RETURN v""")

  #   deleteDataNode(label: String!, submitter_donor_id: String!, program_id : String! ): [Patient]!
  #       @cypher( statement: """
  #                MATCH (z {submitter_donor_id: $submitter_donor_id, program_id : $program_id})-[*]->(o)
  #                WHERE $label in labels(z)
  #                DETACH DELETE z, o 
  #                """)
  #   }